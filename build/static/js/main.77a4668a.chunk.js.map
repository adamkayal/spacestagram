{"version":3,"sources":["components/Post/Post.js","firebase/firebase.js","components/ModalContainer/ModalContainer.js","App.js","index.js"],"names":["Post","idx","copyright","date","explanation","media_type","hdurl","thumbnail_url","url","title","user","setOpenLogIn","setOpenShare","setPostUrl","useState","liked","setLiked","comment","setComment","comments","setComments","useEffect","addLike","$","fadeIn","fadeOut","className","src","alt","onDoubleClick","id","onClick","document","getElementById","focus","map","email","text","type","placeholder","value","onChange","e","target","disabled","event","preventDefault","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","getModalStyle","top","left","transform","ModalContainer","open","setOpen","buttonText","isUserForm","postUrl","setOpenSignUp","theme","modalStyle","setEmail","password","setPassword","description","Modal","onClose","Fade","in","style","Input","autoFocus","error","validate","required","length","ThemeProvider","Button","variant","color","createTheme","palette","primary","main","App","posts","setPosts","openSignUp","openLogIn","openShare","setUser","showLoader","setShowLoader","startDate","setStartDate","endDate","setEndDate","axiosRetry","axios","retries","retryCondition","response","status","unsubscribe","onAuthStateChanged","authUser","search","queryString","concat","get","then","data","catch","alert","console","getTodayString","Date","toISOString","slice","HtmlTooltip","withStyles","tooltip","backgroundColor","maxWidth","fontSize","typography","pxToRem","border","textAlign","Tooltip","createUserWithEmailAndPassword","message","signInWithEmailAndPassword","updateProfile","displayName","navigator","clipboard","writeText","signOut","noValidate","TextField","label","InputLabelProps","shrink","InputProps","inputProps","max","min","height","width","visible","post","ReactDOM","render"],"mappings":"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","file":"static/js/main.77a4668a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport $ from \"jquery\";\r\nimport \"./Post.css\";\r\n\r\nfunction Post({\r\n    idx,\r\n    copyright = \"NASA\",\r\n    date,\r\n    explanation,\r\n    media_type,\r\n    hdurl,\r\n    thumbnail_url,\r\n    url,\r\n    title,\r\n    user,\r\n    setOpenLogIn,\r\n    setOpenShare,\r\n    setPostUrl,\r\n}) {\r\n    Post.propTypes = {\r\n        idx: PropTypes.number.isRequired,\r\n        copyright: PropTypes.string,\r\n        date: PropTypes.string.isRequired,\r\n        explanation: PropTypes.string.isRequired,\r\n        media_type: PropTypes.string.isRequired,\r\n        thumbnail_url: PropTypes.string,\r\n        hdurl: PropTypes.string,\r\n        url: PropTypes.string,\r\n        title: PropTypes.string.isRequired,\r\n        user: PropTypes.any,\r\n        setOpenLogIn: PropTypes.func.isRequired,\r\n        setOpenShare: PropTypes.func.isRequired,\r\n        setPostUrl: PropTypes.func.isRequired,\r\n    };\r\n\r\n    const [liked, setLiked] = useState(false);\r\n    const [comment, setComment] = useState(\"\");\r\n    const [comments, setComments] = useState([]);\r\n\r\n    // we remove all likes if the user is not logged in\r\n    useEffect(() => {\r\n        if (!user) {\r\n            setLiked(false);\r\n        }\r\n    }, [user]);\r\n\r\n    // function that adds the like\r\n    const addLike = () => {\r\n        if (user) {\r\n            // if the user is logged in\r\n            // we toggle the like state\r\n            setLiked(!liked);\r\n\r\n            // heart animation\r\n            $(`#overlay_${idx}`).fadeIn(400, function () {\r\n                $(`#overlay_${idx}`).fadeOut(400);\r\n            });\r\n        } else {\r\n            // if the user is not logged in, we prompt him to log in\r\n            setOpenLogIn(true);\r\n        }\r\n    };\r\n\r\n    // function that opens the share dialog\r\n    const share = () => {\r\n        setPostUrl(thumbnail_url || hdurl || url);\r\n        setOpenShare(true);\r\n    };\r\n\r\n    // function that focuses the comment input if the user is logged in\r\n    const focusComment = () => {\r\n        if (user) {\r\n            // if the user is logged in, we focus the comment input\r\n            document.getElementById(`input_${idx}`).focus();\r\n        } else {\r\n            // if the user is not logged in, we prompt him to log in\r\n            setOpenLogIn(true);\r\n        }\r\n    };\r\n\r\n    // function that handles the addition of a comment\r\n    const postComment = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (user) {\r\n            // if the user is logged in, we add the new comment\r\n            setComments([\r\n                ...comments,\r\n                {\r\n                    email: user.email,\r\n                    text: comment,\r\n                },\r\n            ]);\r\n\r\n            // and clear the comment input\r\n            setComment(\"\");\r\n        } else {\r\n            // if the user is not logged in, we prompt him to log in\r\n            setOpenLogIn(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <h2 className=\"post__title\" data-testid=\"title\">\r\n                {title}\r\n            </h2>\r\n\r\n            <div className=\"post__imageContainer\">\r\n                {media_type === \"video\" ? (\r\n                    <iframe\r\n                        className=\"post__video\"\r\n                        src={hdurl || url}\r\n                        title={title}\r\n                        data-testid=\"postVideo\"\r\n                    />\r\n                ) : (\r\n                    <img\r\n                        className=\"post__image\"\r\n                        src={\r\n                            thumbnail_url ||\r\n                            hdurl ||\r\n                            url ||\r\n                            \"/no_image_available.jpg\"\r\n                        }\r\n                        alt={title}\r\n                        title={title}\r\n                        onDoubleClick={addLike}\r\n                        data-testid=\"postImage\"\r\n                    />\r\n                )}\r\n                <img\r\n                    id={`overlay_${idx}`}\r\n                    className=\"post__imageOverlay\"\r\n                    src={\"/heart_icon.png\"}\r\n                    alt=\"Heart\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"post__tools\">\r\n                <img\r\n                    className=\"post__icon\"\r\n                    src={\r\n                        liked && user\r\n                            ? \"/heart_icon_liked.png\"\r\n                            : \"/heart_icon_unliked.png\"\r\n                    }\r\n                    alt=\"Like\"\r\n                    title=\"Like\"\r\n                    onClick={addLike}\r\n                    data-testid=\"likeBtn\"\r\n                />\r\n                <img\r\n                    className=\"post__icon\"\r\n                    src=\"/comment_icon.png\"\r\n                    alt=\"Comment\"\r\n                    title=\"Comment\"\r\n                    onClick={focusComment}\r\n                    data-testid=\"commentBtn\"\r\n                />\r\n                <img\r\n                    className=\"post__icon\"\r\n                    src=\"/share_icon.png\"\r\n                    alt=\"Share\"\r\n                    title=\"Share\"\r\n                    onClick={share}\r\n                />\r\n            </div>\r\n\r\n            <p className=\"post__text\" data-testid=\"postText\">\r\n                <strong>{copyright}</strong>: {explanation}\r\n            </p>\r\n            <p className=\"post__date\">{date}</p>\r\n\r\n            <div data-testid=\"postComments\">\r\n                {(comments || []).map((comment, idx) => (\r\n                    <p key={`comment_${idx}`} className=\"post__comment\">\r\n                        <strong>{comment.email}</strong> {comment.text}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n\r\n            <form className=\"post__commentBox\">\r\n                <input\r\n                    id={`input_${idx}`}\r\n                    className=\"post__input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Add a comment...\"\r\n                    value={comment}\r\n                    onChange={(e) => setComment(e.target.value)}\r\n                    data-testid=\"commentInput\"\r\n                />\r\n                <button\r\n                    className=\"post__button\"\r\n                    disabled={!comment}\r\n                    type=\"submit\"\r\n                    onClick={postComment}\r\n                    data-testid=\"commentPostBtn\"\r\n                >\r\n                    Post\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import { firebase } from '@firebase/app'\r\nimport '@firebase/firestore'\r\nimport '@firebase/auth'\r\nimport '@firebase/storage'\r\n\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyBZk_jO9tqniRpB6AbPb5lhYeisY6-Nb74\",\r\n  authDomain: \"adamkayal-spacestagram.firebaseapp.com\",\r\n  projectId: \"adamkayal-spacestagram\",\r\n  storageBucket: \"adamkayal-spacestagram.appspot.com\",\r\n  messagingSenderId: \"859658276215\",\r\n  appId: \"1:859658276215:web:6276119e314a7d61582572\",\r\n  measurementId: \"G-DTJGBGWV2K\"\r\n});\r\n\r\nconst db = firebase.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };\r\n","import { Button, Input, Modal, Fade } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ModalContainer.css\";\r\nimport { validate } from 'email-validator';\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nfunction getModalStyle() {\r\n    const top = 50;\r\n    const left = 50;\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nfunction ModalContainer({\r\n    open,\r\n    setOpen,\r\n    onClick,\r\n    buttonText,\r\n    isUserForm,\r\n    postUrl,\r\n    setOpenSignUp,\r\n    theme\r\n}) {\r\n    ModalContainer.propTypes = {\r\n        open: PropTypes.bool.isRequired,\r\n        setOpen: PropTypes.func.isRequired,\r\n        onClick: PropTypes.any.isRequired,\r\n        buttonText: PropTypes.string.isRequired,\r\n        isUserForm: PropTypes.bool.isRequired,\r\n        postUrl: PropTypes.string,\r\n        setOpenSignUp: PropTypes.func,\r\n        theme: PropTypes.object.isRequired\r\n    };\r\n\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const description = buttonText === \"Copy to clipboard\"\r\n        ? \"Copy the post link to share it\"\r\n        : \"Log in or sign up to like and comment on posts\";\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={() => setOpen(false)}\r\n            aria-labelledby={buttonText}\r\n            aria-describedby={description}\r\n            data-testid=\"modal\"\r\n        >\r\n            <Fade in={open}>\r\n                <form style={modalStyle} className=\"modalContainer__paper\">\r\n                    <div className=\"modalContainer__message\">\r\n                        {description}\r\n                    </div>\r\n                    <div className=\"modalContainer__signup\">\r\n                        <center>\r\n                            <img\r\n                                className=\"modalContainer__headerImage\"\r\n                                src=\"/logo.png\"\r\n                                alt=\"spacetagram logo\"\r\n                                data-testid=\"logo\"\r\n                            />\r\n                        </center>\r\n\r\n                        {!isUserForm ? (\r\n                            <Input\r\n                                type=\"text\"\r\n                                value={postUrl}\r\n                                disabled\r\n                                data-testid=\"copyInput\"\r\n                            />\r\n                        ) : (\r\n                            <div className=\"modalContainer__signup\">\r\n                                <Input\r\n                                    type=\"email\"\r\n                                    placeholder=\"email\"\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                    autoFocus\r\n                                    error={!validate(email)}\r\n                                    required\r\n                                    data-testid=\"emailInput\"\r\n                                />\r\n                                <Input\r\n                                    type=\"password\"\r\n                                    placeholder=\"password\"\r\n                                    value={password}\r\n                                    onChange={(e) => setPassword(e.target.value)}\r\n                                    error={password.length < 6}\r\n                                    required\r\n                                    data-testid=\"passwordInput\"\r\n                                />\r\n                            </div>\r\n                        )}\r\n\r\n                        <ThemeProvider theme={theme}>\r\n                            <Button\r\n                                className=\"modalContainer__button\"\r\n                                type={\r\n                                    isUserForm ? \"submit\" : null\r\n                                }\r\n                                disabled={isUserForm && (!validate(email) || password.length < 6)}\r\n                                onClick={(event) => onClick(event, email, password)}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                            >\r\n                                {buttonText}\r\n                            </Button>\r\n                        </ThemeProvider>\r\n\r\n                        {buttonText === \"Log In\" && (\r\n                            <div\r\n                                className=\"modalContainer__signUpOfferText\"\r\n                                data-testid=\"signUpOffer\"\r\n                            >\r\n                                Don't have an account?\r\n                                <button\r\n                                    className=\"modalContainer__buttonLink\"\r\n                                    onClick={(e) => {\r\n                                        e.preventDefault();\r\n                                        setOpen(false);\r\n                                        setOpenSignUp(true);\r\n                                    }}\r\n                                >\r\n                                    Sign up\r\n                                </button>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </form>\r\n            </Fade>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ModalContainer;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./components/Post/Post\";\nimport { auth } from \"./firebase/firebase\";\nimport axios from \"axios\";\nimport axiosRetry from \"axios-retry\";\nimport { Button, TextField, Tooltip } from \"@material-ui/core\";\nimport ModalContainer from \"./components/ModalContainer/ModalContainer\";\nimport Loader from \"react-loader-spinner\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { withStyles, createTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: '#0095f6'\n        }\n    }\n});\n\nfunction App() {\n    const [posts, setPosts] = useState([]);\n    const [openSignUp, setOpenSignUp] = useState(false);\n    const [openLogIn, setOpenLogIn] = useState(false);\n    const [openShare, setOpenShare] = useState(false);\n    const [postUrl, setPostUrl] = useState(\"\");\n    const [user, setUser] = useState(null);\n\n    const [showLoader, setShowLoader] = useState(false);\n    const [startDate, setStartDate] = useState(\"\");\n    const [endDate, setEndDate] = useState(\"\");\n\n    // will retry the GET request up to 3 times if there is an internal server error\n    axiosRetry(axios, {\n        retries: 3,\n        retryCondition: (error) => error.response.status === 500,\n    });\n\n    // we set a listener on the user object\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged((authUser) => {\n            if (authUser) {\n                setUser(authUser);\n            } else {\n                setUser(null);\n            }\n        });\n\n        return () => unsubscribe()\n    }, [user]);\n\n    // we do a search at the when the page loads\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => search(), []);\n\n    // this function fetches\n    const search = (event) => {\n        if (event) event.preventDefault();\n\n        // if dates are not correctly selected, we will choose 20 random pictures\n        let queryString = \"count=3\";\n        if (startDate) {\n            // if a correct start date is chosen, we add the start_date query string instead\n            queryString = `start_date=${startDate}`;\n            if (endDate) {\n                // if a correct end date is chosen, we also add the end_date query string\n                queryString = queryString.concat(`&end_date=${endDate}`);\n            }\n        }\n\n        setShowLoader(true);\n        axios\n            .get(\n                `https://api.nasa.gov/planetary/apod?api_key=ESNnOstvfNx2gncbFYQtbjIZDCaLKqbg5PM0Xo83&${queryString}`\n            )\n            .then((response) => {\n                setShowLoader(false);\n                setPosts(response.data);\n            })\n            .catch((error) => {\n                alert(\"API call failed after 3 retry attempts. Please try again.\");\n                console.error(error);\n                setShowLoader(false);\n            });\n    };\n\n    // function that handles the sign up\n    const signUp = (event, email, password) => {\n        event.preventDefault();\n\n        // we create the user with firebase\n        auth.createUserWithEmailAndPassword(email, password)\n            .then(() => setOpenSignUp(false))\n            .catch((error) => alert(error.message));\n    };\n\n    // function that handles the log in\n    const logIn = (event, email, password) => {\n        event.preventDefault();\n\n        // we log in the user with firebase\n        auth.signInWithEmailAndPassword(email, password)\n            .then((authUser) => {\n                authUser.user.updateProfile({\n                    displayName: email,\n                });\n                setOpenLogIn(false);\n            })\n            .catch((error) => alert(error.message));\n    };\n\n    // function that copies the post url to the clipboard\n    const copyToClipboard = (event) => {\n        event.preventDefault();\n\n        // we copy the url to the clipboard and close the modal\n        navigator.clipboard.writeText(postUrl);\n        setOpenShare(false);\n    };\n\n    // handy function to get the correct date format of today's\n    // date for the date selectors\n    const getTodayString = () => {\n        return new Date().toISOString().slice(0, 10);\n    };\n\n    const HtmlTooltip = withStyles((theme) => ({\n        tooltip: {\n            backgroundColor: \"#f5f5f9\",\n            color: \"rgba(0, 0, 0, 0.87)\",\n            maxWidth: 220,\n            fontSize: theme.typography.pxToRem(16),\n            border: \"1px solid #dadde9\",\n            textAlign: \"justify\",\n        },\n    }))(Tooltip);\n\n    return (\n        <div className=\"app\">\n            <ModalContainer\n                open={openSignUp}\n                setOpen={setOpenSignUp}\n                onClick={signUp}\n                buttonText=\"Sign Up\"\n                isUserForm={true}\n                theme={theme}\n            />\n\n            <ModalContainer\n                open={openLogIn}\n                setOpen={setOpenLogIn}\n                onClick={logIn}\n                buttonText=\"Log In\"\n                isUserForm={true}\n                setOpenSignUp={setOpenSignUp}\n                theme={theme}\n            />\n\n            <ModalContainer\n                open={openShare}\n                setOpen={setOpenShare}\n                onClick={copyToClipboard}\n                buttonText=\"Copy to clipboard\"\n                isUserForm={false}\n                postUrl={postUrl}\n                theme={theme}\n            />\n\n            <div className=\"app__header\">\n                <img\n                    className=\"app__headerImage\"\n                    src=\"/logo.png\"\n                    alt=\"spacetagram logo\"\n                    data-testid=\"logo\"\n                />\n\n                {user ? (\n                    <ThemeProvider theme={theme}>\n                        <Button onClick={() => auth.signOut()} variant=\"contained\" color=\"primary\">Logout</Button>\n                    </ThemeProvider>\n                ) : (\n                    <div className=\"app__authButtons\">\n                        <ThemeProvider theme={theme}>\n                            <Button onClick={() => setOpenLogIn(true)} variant=\"contained\" color=\"primary\">\n                                Log In\n                            </Button>\n                        </ThemeProvider>\n                        <ThemeProvider theme={theme}>\n                            <Button onClick={() => setOpenSignUp(true)} variant=\"contained\" color=\"primary\">\n                                Sign Up\n                            </Button>\n                        </ThemeProvider>\n                    </div>\n                )}\n            </div>\n\n            <form className=\"app__search\" noValidate>\n                <div className=\"app__dateTitle\">\n                    <HtmlTooltip title=\"If no dates are selected, 3 random posts will be shown. If only a start date is selected, the end date will by default be today's date.\">\n                        <InfoIcon className=\"app__infoIcon\" aria-label=\"info\" />\n                    </HtmlTooltip>\n                    <p>\n                        <strong>Select dates for search (optional):</strong>\n                    </p>\n                </div>\n                <TextField\n                    id=\"start-date\"\n                    data-testid=\"startDate\"\n                    label=\"Start date\"\n                    type=\"date\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    InputProps={{\n                        inputProps: { max: getTodayString() },\n                    }}\n                    value={startDate}\n                    onChange={(event) => setStartDate(event.target.value)}\n                />\n                <TextField\n                    id=\"end-date\"\n                    data-testid=\"endDate\"\n                    label=\"End date\"\n                    type=\"date\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    InputProps={{\n                        inputProps: { min: startDate, max: getTodayString() },\n                    }}\n                    value={endDate}\n                    onChange={(event) => setEndDate(event.target.value)}\n                    disabled={!startDate}\n                />\n                <ThemeProvider theme={theme}>\n                    <Button type=\"submit\" onClick={(event) => search(event)} variant=\"contained\" color=\"primary\">\n                        Search\n                    </Button>\n                </ThemeProvider>\n            </form>\n\n            <div className=\"app__posts\">\n                <Loader\n                    type=\"Circles\"\n                    color=\"#0095f6\"\n                    height={200}\n                    width={200}\n                    visible={showLoader}\n                    className=\"app__loader\"\n                />\n\n                {!showLoader &&\n                    (posts || []).map((post, idx) => (\n                        <Post\n                            key={idx}\n                            idx={idx}\n                            user={user}\n                            setOpenLogIn={setOpenLogIn}\n                            setOpenShare={setOpenShare}\n                            setPostUrl={setPostUrl}\n                            {...post}\n                        />\n                    ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}