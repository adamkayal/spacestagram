{"version":3,"sources":["components/Post/Post.js","firebase/firebase.js","components/ModalContainer/ModalContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Post","idx","copyright","date","explanation","hdurl","thumbnail_url","url","title","user","setOpenLogIn","setOpenShare","setPostUrl","formattedDate","Date","toDateString","useState","liked","setLiked","comment","setComment","comments","setComments","addLike","$","fadeIn","fadeOut","className","src","alt","onDoubleClick","id","onClick","document","getElementById","focus","map","email","text","type","placeholder","value","onChange","e","target","disabled","event","preventDefault","displayName","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","getModalStyle","top","left","transform","ModalContainer","open","setOpen","buttonText","postUrl","setOpenSignUp","modalStyle","setEmail","password","setPassword","Modal","onClose","style","Input","autoFocus","Button","App","posts","setPosts","openSignUp","openLogIn","openShare","setUser","showLoader","setShowLoader","startDate","setStartDate","endDate","setEndDate","axiosRetry","axios","retries","useEffect","unsubscribe","onAuthStateChanged","authUser","search","queryString","concat","get","then","response","data","catch","error","alert","console","getTodayString","toISOString","slice","HtmlTooltip","withStyles","theme","tooltip","backgroundColor","color","maxWidth","fontSize","typography","pxToRem","border","textAlign","Tooltip","createUserWithEmailAndPassword","message","signInWithEmailAndPassword","updateProfile","navigator","clipboard","writeText","signOut","noValidate","TextField","label","InputLabelProps","shrink","InputProps","inputProps","max","min","height","width","visible","post","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.84aa7aff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport $ from \"jquery\";\r\nimport \"./Post.css\";\r\n\r\nfunction Post({\r\n    idx,\r\n    copyright = \"NASA\",\r\n    date,\r\n    explanation,\r\n    hdurl,\r\n    thumbnail_url,\r\n    url,\r\n    title,\r\n    user,\r\n    setOpenLogIn,\r\n    setOpenShare,\r\n    setPostUrl,\r\n}) {\r\n    Post.propTypes = {\r\n        idx: PropTypes.number.isRequired,\r\n        copyright: PropTypes.string,\r\n        date: PropTypes.string.isRequired,\r\n        explanation: PropTypes.string.isRequired,\r\n        thumbnail_url: PropTypes.string,\r\n        hdurl: PropTypes.string,\r\n        url: PropTypes.string,\r\n        title: PropTypes.string.isRequired,\r\n        user: PropTypes.any,\r\n        setOpenLogIn: PropTypes.func.isRequired,\r\n        setOpenShare: PropTypes.func.isRequired,\r\n        setPostUrl: PropTypes.func.isRequired,\r\n    };\r\n\r\n    const formattedDate = new Date(date).toDateString();\r\n\r\n    const [liked, setLiked] = useState(false);\r\n    const [comment, setComment] = useState(\"\");\r\n    const [comments, setComments] = useState([]);\r\n\r\n    const addLike = () => {\r\n        if (user) {\r\n            // if the user is logged in\r\n            // we toggle the like state\r\n            setLiked(!liked);\r\n\r\n            // heart animation\r\n            $(`#overlay_${idx}`).fadeIn(400, function () {\r\n                $(`#overlay_${idx}`).fadeOut(400);\r\n            });\r\n        } else {\r\n            // if the user is not logged in, we prompt him to log in \r\n            setOpenLogIn(true);\r\n        }\r\n    };\r\n\r\n    const share = () => {\r\n        setPostUrl(thumbnail_url || hdurl || url);\r\n        setOpenShare(true);\r\n    };\r\n\r\n    const focusComment = () => {\r\n        if (user) {\r\n            // if the user is logged in, we focus the comment input\r\n            document.getElementById(`input_${idx}`).focus();\r\n        } else {\r\n            // if the user is not logged in, we prompt him to log in \r\n            setOpenLogIn(true);\r\n        }\r\n    };\r\n\r\n    const postComment = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (user) {\r\n            // if the user is logged in, we add the new comment\r\n            setComments([\r\n                ...comments,\r\n                {\r\n                    email: user.displayName,\r\n                    text: comment,\r\n                },\r\n            ]);\r\n\r\n            // and clear the comment input\r\n            setComment(\"\");\r\n        } else {\r\n            // if the user is not logged in, we prompt him to log in \r\n            setOpenLogIn(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <p className=\"post__title\">{title}</p>\r\n\r\n            <div className=\"post__imageContainer\">\r\n                <img\r\n                    className=\"post__image\"\r\n                    src={\r\n                        thumbnail_url ||\r\n                        hdurl ||\r\n                        url ||\r\n                        \"/no_image_available.jpg\"\r\n                    }\r\n                    alt={title}\r\n                    title={title}\r\n                    onDoubleClick={addLike}\r\n                />\r\n\r\n                <img\r\n                    id={`overlay_${idx}`}\r\n                    className=\"post__imageOverlay\"\r\n                    src={\"/heart_icon.png\"}\r\n                    alt=\"Heart\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"post__tools\">\r\n                <img\r\n                    className=\"post__icon\"\r\n                    src={\r\n                        liked && user\r\n                            ? \"/heart_icon_liked.png\"\r\n                            : \"/heart_icon_unliked.png\"\r\n                    }\r\n                    alt=\"Like\"\r\n                    title=\"Like\"\r\n                    onClick={addLike}\r\n                />\r\n                <img\r\n                    className=\"post__icon\"\r\n                    src=\"/comment_icon.png\"\r\n                    alt=\"Comment\"\r\n                    title=\"Comment\"\r\n                    onClick={focusComment}\r\n                />\r\n                <img\r\n                    className=\"post__icon\"\r\n                    src=\"/share_icon.png\"\r\n                    alt=\"Share\"\r\n                    title=\"Share\"\r\n                    onClick={share}\r\n                />\r\n            </div>\r\n\r\n            <p className=\"post__text\">\r\n                <strong>{copyright}</strong>: {explanation}\r\n            </p>\r\n            <p className=\"post__date\">{formattedDate}</p>\r\n\r\n            <div>\r\n                {comments.map((comment, idx) => (\r\n                    <p key={`comment_${idx}`} className=\"post__comment\">\r\n                        <strong>{comment.email}</strong> {comment.text}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n\r\n            <form className=\"post__commentBox\">\r\n                <input\r\n                    id={`input_${idx}`}\r\n                    className=\"post__input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Add a comment...\"\r\n                    value={comment}\r\n                    onChange={(e) => setComment(e.target.value)}\r\n                />\r\n                <button\r\n                    className=\"post__button\"\r\n                    disabled={!comment}\r\n                    type=\"submit\"\r\n                    onClick={postComment}\r\n                >\r\n                    Post\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import { firebase } from '@firebase/app'\r\nimport '@firebase/firestore'\r\nimport '@firebase/auth'\r\nimport '@firebase/storage'\r\n\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyBZk_jO9tqniRpB6AbPb5lhYeisY6-Nb74\",\r\n  authDomain: \"adamkayal-spacestagram.firebaseapp.com\",\r\n  projectId: \"adamkayal-spacestagram\",\r\n  storageBucket: \"adamkayal-spacestagram.appspot.com\",\r\n  messagingSenderId: \"859658276215\",\r\n  appId: \"1:859658276215:web:6276119e314a7d61582572\",\r\n  measurementId: \"G-DTJGBGWV2K\"\r\n});\r\n\r\nconst db = firebase.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };\r\n","import { Button, Input, Modal } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ModalContainer.css\";\r\n\r\nfunction getModalStyle() {\r\n    const top = 50;\r\n    const left = 50;\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nfunction ModalContainer({\r\n    open,\r\n    setOpen,\r\n    onClick,\r\n    buttonText,\r\n    postUrl,\r\n    setOpenSignUp,\r\n}) {\r\n    ModalContainer.propTypes = {\r\n        open: PropTypes.bool.isRequired,\r\n        setOpen: PropTypes.func.isRequired,\r\n        onClick: PropTypes.any.isRequired,\r\n        buttonText: PropTypes.string.isRequired,\r\n        postUrl: PropTypes.string,\r\n        setOpenSignUp: PropTypes.func,\r\n    };\r\n\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={() => setOpen(false)}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n        >\r\n            <div style={modalStyle} className=\"modalContainer__paper\">\r\n                {buttonText === \"Log In\" && (\r\n                    <div className=\"modalContainer__message\">\r\n                        Log in to like and comment on posts\r\n                    </div>\r\n                )}\r\n                <div className=\"app__signup\">\r\n                    <center>\r\n                        <img\r\n                            className=\"app__headerImage\"\r\n                            src=\"/logo.png\"\r\n                            alt=\"spacetagram logo\"\r\n                        />\r\n                    </center>\r\n\r\n                    {buttonText === \"Copy to clipboard\" ? (\r\n                        <Input type=\"text\" value={postUrl} disabled />\r\n                    ) : (\r\n                        <div className=\"app__signup\">\r\n                            <Input\r\n                                type=\"email\"\r\n                                placeholder=\"email\"\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                autoFocus\r\n                            />\r\n                            <Input\r\n                                type=\"password\"\r\n                                placeholder=\"password\"\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    )}\r\n\r\n                    <Button\r\n                        className=\"modalContainer__button\"\r\n                        type={\r\n                            buttonText !== \"Copy to clipboard\" ? \"submit\" : null\r\n                        }\r\n                        onClick={(event) => onClick(event, email, password)}\r\n                    >\r\n                        {buttonText}\r\n                    </Button>\r\n\r\n                    {buttonText === \"Log In\" && (\r\n                        <div className=\"modalContainer__signUpOfferText\">\r\n                            Don't have an account?\r\n                            <button\r\n                                className=\"modalContainer__buttonLink\"\r\n                                onClick={() => {\r\n                                    setOpen(false);\r\n                                    setOpenSignUp(true);\r\n                                }}\r\n                            >\r\n                                Sign up\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ModalContainer;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./components/Post/Post\";\nimport { auth } from \"./firebase/firebase\";\nimport axios from \"axios\";\nimport axiosRetry from \"axios-retry\";\nimport { Button, TextField, Tooltip } from \"@material-ui/core\";\nimport ModalContainer from \"./components/ModalContainer/ModalContainer\";\nimport Loader from \"react-loader-spinner\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nfunction App() {\n    const [posts, setPosts] = useState([]);\n    const [openSignUp, setOpenSignUp] = useState(false);\n    const [openLogIn, setOpenLogIn] = useState(false);\n    const [openShare, setOpenShare] = useState(false);\n    const [postUrl, setPostUrl] = useState(\"\");\n    const [user, setUser] = useState(null);\n\n    const [showLoader, setShowLoader] = useState(false);\n    const [startDate, setStartDate] = useState(\"\");\n    const [endDate, setEndDate] = useState(\"\");\n\n    // will retry the GET request up to 3 times if something goes wrong\n    axiosRetry(axios, { retries: 3 });\n\n    // we set a listener on the user object\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged((authUser) => {\n            if (authUser) {\n                setUser(authUser);\n            } else {\n                setUser(null);\n            }\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, [user]);\n\n    // we do a search at the when the page loads\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => search(), []);\n\n    // this function fetches \n    const search = (event) => {\n        if (event) event.preventDefault();\n\n        // if dates are not correctly selected, we will choose 20 random pictures\n        let queryString = \"count=20\";\n        if (startDate) {\n            // if a correct start date is chosen, we add the start_date query string instead\n            queryString = `start_date=${startDate}`;\n            if (endDate) {\n                // if a correct end date is chosen, we also add the end_date query string\n                queryString = queryString.concat(`&end_date=${endDate}`);\n            }\n        }\n\n        setShowLoader(true);\n        axios\n            .get(\n                `https://api.nasa.gov/planetary/apod?api_key=ESNnOstvfNx2gncbFYQtbjIZDCaLKqbg5PM0Xo83&thumbs=True&${queryString}`\n            )\n            .then((response) => {\n                setShowLoader(false);\n                setPosts(response.data);\n            })\n            .catch((error) => {\n                alert(\"API call failed after 3 retry attempts. Please try again.\");\n                console.error(error);\n                setShowLoader(false);\n            });\n    };\n\n    const signUp = (event, email, password) => {\n        event.preventDefault();\n\n        // we sign up the user with firebase\n        auth.createUserWithEmailAndPassword(email, password)\n            .then(() => setOpenSignUp(false))\n            .catch((error) => alert(error.message));\n    };\n\n    const logIn = (event, email, password) => {\n        event.preventDefault();\n\n        // we log in the user with firebase\n        auth.signInWithEmailAndPassword(email, password)\n            .then((authUser) => {\n                authUser.user.updateProfile({\n                    displayName: email,\n                });\n                setOpenLogIn(false);\n            })\n            .catch((error) => alert(error.message));\n    };\n\n    // handy function to get the correct date format of today's\n    // date for the date selectors\n    const getTodayString = () => {\n        return new Date().toISOString().slice(0, 10);\n    };\n\n    const HtmlTooltip = withStyles((theme) => ({\n        tooltip: {\n            backgroundColor: \"#f5f5f9\",\n            color: \"rgba(0, 0, 0, 0.87)\",\n            maxWidth: 220,\n            fontSize: theme.typography.pxToRem(16),\n            border: \"1px solid #dadde9\",\n            textAlign: \"justify\",\n        },\n    }))(Tooltip);\n\n    return (\n        <div className=\"app\">\n            <ModalContainer\n                open={openSignUp}\n                setOpen={setOpenSignUp}\n                onClick={signUp}\n                buttonText=\"Sign Up\"\n            />\n\n            <ModalContainer\n                open={openLogIn}\n                setOpen={setOpenLogIn}\n                onClick={logIn}\n                buttonText=\"Log In\"\n                setOpenSignUp={setOpenSignUp}\n            />\n\n            <ModalContainer\n                open={openShare}\n                setOpen={setOpenShare}\n                onClick={() => navigator.clipboard.writeText(postUrl)}\n                buttonText=\"Copy to clipboard\"\n                postUrl={postUrl}\n            />\n\n            <div className=\"app__header\">\n                <img\n                    className=\"app__headerImage\"\n                    src=\"/logo.png\"\n                    alt=\"spacetagram logo\"\n                />\n\n                {user ? (\n                    <div>\n                        <Button onClick={() => auth.signOut()}>Logout</Button>\n                    </div>\n                ) : (\n                    <div className=\"app__authButtons\">\n                        <Button onClick={() => setOpenLogIn(true)}>\n                            Log In\n                        </Button>\n                        <Button onClick={() => setOpenSignUp(true)}>\n                            Sign Up\n                        </Button>\n                    </div>\n                )}\n            </div>\n\n            <form className=\"app__search\" noValidate>\n                <div className=\"app__dateTitle\">\n                    <HtmlTooltip title=\"If no dates are selected, 20 random posts will be shown. If only a start date is selected, the end date will by default be today's date.\">\n                        <InfoIcon className=\"app__infoIcon\" aria-label=\"info\" />\n                    </HtmlTooltip>\n                    <p>\n                        <strong>Select dates for search (optional):</strong>\n                    </p>\n                </div>\n                <TextField\n                    id=\"start-date\"\n                    label=\"Start date\"\n                    type=\"date\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    InputProps={{\n                        inputProps: { max: getTodayString() },\n                    }}\n                    value={startDate}\n                    onChange={(event) => setStartDate(event.target.value)}\n                />\n                <TextField\n                    id=\"end-date\"\n                    label=\"End date\"\n                    type=\"date\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    InputProps={{\n                        inputProps: { min: startDate, max: getTodayString() },\n                    }}\n                    value={endDate}\n                    onChange={(event) => setEndDate(event.target.value)}\n                    disabled={!startDate}\n                />\n                <Button type=\"submit\" onClick={(event) => search(event)}>\n                    Search\n                </Button>\n            </form>\n\n            <div className=\"app__posts\">\n                <Loader\n                    type=\"Circles\"\n                    color=\"#00BFFF\"\n                    height={200}\n                    width={200}\n                    visible={showLoader}\n                    className=\"app__loader\"\n                />\n\n                {!showLoader &&\n                    posts.map((post, idx) => (\n                        <Post\n                            key={idx}\n                            idx={idx}\n                            user={user}\n                            setOpenLogIn={setOpenLogIn}\n                            setOpenShare={setOpenShare}\n                            setPostUrl={setPostUrl}\n                            {...post}\n                        />\n                    ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}